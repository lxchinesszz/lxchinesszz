import{_ as h,E as l,c as k,m as s,a as i,J as n,w as t,ac as p,o as e}from"./chunks/framework.C9DUt1S1.js";const b=JSON.parse('{"title":"数据隔离","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"数据隔离","category":"场景分析"},"headers":[],"relativePath":"test/数据隔离.md","filePath":"test/数据隔离.md"}'),r={name:"test/数据隔离.md"},E={class:"info custom-block"},d=s("p",{class:"custom-block-title"},"数据隔离",-1),F=s("code",null,"mock",-1),g=s("code",null,"JUnit",-1),y=s("h2",{id:"解决方案",tabindex:"-1"},[i("解决方案 "),s("a",{class:"header-anchor",href:"#解决方案","aria-label":'Permalink to "解决方案"'},"​")],-1),o=s("p",null,":::note 单测引导类配置说明",-1),C=s("li",null,"@Transactional 如果加上这个注解,就代表全局的单测,事务执行完都会自动回滚",-1),c=p("",4);function B(u,D,A,_,q,m){const a=l("Highlight");return e(),k("div",null,[s("div",E,[d,s("p",null,[i("数据隔离一直是一个测试的痛点，测试数据可能是 "),F,i(" 的数据,所以单测过程中,难免会造成脏数据 这种场景,有通用的解决方案。"),g,i(" 已经帮我们做好了。这里我们只讲实操和用法。 如果有兴趣的话可以研究下 "),n(a,null,{default:t(()=>[i("TransactionalTestExecutionListener")]),_:1})])]),y,o,s("ul",null,[C,s("li",null,[i("@Rollback(false) 如果想某个方法事务不回滚,可以单独在方法上设置。"),n(a,{color:"#25c2a0"},{default:t(()=>[i("【方法级别>全局】")]),_:1}),i(" :::")])]),c])}const f=h(r,[["render",B]]);export{b as __pageData,f as default};
