import{_ as e,o as t,c as r,a4 as o}from"./chunks/framework.B8fosacB.js";const b=JSON.parse('{"title":"第03篇:分布式服务调用","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":true,"title":"第03篇:分布式服务调用","draft":"ture","category":"分布式"},"headers":[],"relativePath":"post/java/分布式/分布式服务调用.md","filePath":"post/java/分布式/分布式服务调用.md","lastUpdated":1731158524000}'),i={name:"post/java/分布式/分布式服务调用.md"};function d(h,a,l,n,u,c){return t(),r("div",{"data-pagefind-body":!0},a[0]||(a[0]=[o('<h2 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h2><p>首先我们说下，什么是服务调用。其实就相当于两个服务器直接能进行通信。那么计算机之间是如何进行通信的呢? 那就不得不说TCP/IP协议了。而关于TCP协议底层涉及的知识也比较多,随便拿出来一点都够学一个月的。但是这不是本篇 内容的重点，我们只要知道TCP是帮助我们将完整数据进行分块,并且给每块数据进行ip打包进行发送，并且要在数据接u， 飞得更高过过过过过过军扩木，7667EEID .Y VC 受端能将 没有顺序的数据包,重新按照顺序进行组装然后还原数据的就行了。知道这些就行了。如果这些东西你看了,还是没有思路。那么 你可以简单理解成,二进制数据就好了，我们就是对二进制数据按照一定的协议规则，进行数据还原。将二进制数据还原成我们 原来的数据即可。</p><h2 id="二、通信协议" tabindex="-1">二、通信协议 <a class="header-anchor" href="#二、通信协议" aria-label="Permalink to &quot;二、通信协议&quot;">​</a></h2><h3 id="_2-1-tpc协议" tabindex="-1">2.1 TPC协议 <a class="header-anchor" href="#_2-1-tpc协议" aria-label="Permalink to &quot;2.1 TPC协议&quot;">​</a></h3><h3 id="_2-2-http协议" tabindex="-1">2.2 HTTP协议 <a class="header-anchor" href="#_2-2-http协议" aria-label="Permalink to &quot;2.2 HTTP协议&quot;">​</a></h3><h3 id="_2-3-rmi协议" tabindex="-1">2.3 RMI协议 <a class="header-anchor" href="#_2-3-rmi协议" aria-label="Permalink to &quot;2.3 RMI协议&quot;">​</a></h3><h2 id="三、实现" tabindex="-1">三、实现 <a class="header-anchor" href="#三、实现" aria-label="Permalink to &quot;三、实现&quot;">​</a></h2><h3 id="_3-1-springcloud方案" tabindex="-1">3.1 SpringCloud方案 <a class="header-anchor" href="#_3-1-springcloud方案" aria-label="Permalink to &quot;3.1 SpringCloud方案&quot;">​</a></h3><h3 id="_3-2-dubbo方案" tabindex="-1">3.2 dubbo方案 <a class="header-anchor" href="#_3-2-dubbo方案" aria-label="Permalink to &quot;3.2 dubbo方案&quot;">​</a></h3><h3 id="_3-3-grpc方案" tabindex="-1">3.3 GRPC方案 <a class="header-anchor" href="#_3-3-grpc方案" aria-label="Permalink to &quot;3.3 GRPC方案&quot;">​</a></h3><h2 id="四、知识扩展" tabindex="-1">四、知识扩展 <a class="header-anchor" href="#四、知识扩展" aria-label="Permalink to &quot;四、知识扩展&quot;">​</a></h2><h3 id="_4-1-自定义通信协议" tabindex="-1">4.1 自定义通信协议 <a class="header-anchor" href="#_4-1-自定义通信协议" aria-label="Permalink to &quot;4.1 自定义通信协议&quot;">​</a></h3><h3 id="_4-2-rpc是什么" tabindex="-1">4.2 RPC是什么 <a class="header-anchor" href="#_4-2-rpc是什么" aria-label="Permalink to &quot;4.2 RPC是什么&quot;">​</a></h3>',13)]))}const p=e(i,[["render",d]]);export{b as __pageData,p as default};
