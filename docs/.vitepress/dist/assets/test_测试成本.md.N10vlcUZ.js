import{_ as a,C as n,c as s,aa as p,H as i,w as o,m as l,a as e,o as u}from"./chunks/framework.CC62xl_U.js";const N=JSON.parse('{"title":"测试成本","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"测试成本","category":"场景分析"},"headers":[],"relativePath":"test/测试成本.md","filePath":"test/测试成本.md"}'),d={name:"test/测试成本.md"};function f(m,t,b,g,k,x){const r=n("Highlight");return u(),s("div",null,[t[4]||(t[4]=p('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>测试成本到底有多大? 你认为你写的代码需不需要测试? 为了引出成本的话题, 我们先从实际工作中出发 看看你能否经受住这些灵魂的考验吧。</p></div><h2 id="一、灵魂深处的拷问" tabindex="-1">一、灵魂深处的拷问 <a class="header-anchor" href="#一、灵魂深处的拷问" aria-label="Permalink to &quot;一、灵魂深处的拷问&quot;">​</a></h2><ul><li>你的代码质量如何度量？</li><li>你是如何保证代码质量？</li><li>你敢随时重构代码吗？</li><li>你是如何确保重构的代码依然保持正确性？</li><li>你是否有足够信心在没有测试的情况下随时发布你的代码？</li></ul><p>📢 如果答案都比较犹豫，那么就证明我们非常需要单元测试。(ps: 不会有人心里想的是我们需要测试同学吧 😏)</p><p>==它能带给我们很多保障：==</p><hr><ul><li>代码质量持续有保障</li><li>重构正确性保障</li><li>增强自信心</li><li>自动化运行</li></ul><hr><p>Web 应用中的单元测试更加重要，在 Web 产品快速迭代的时期，每个测试用例都给应用的稳定性提供了一层保障。 API 升级，测试用例可以很好地检查代码是否向下兼容。 对于各种可能的输入，一旦测试覆盖，都能明确它的输出。 代码改动后，可以通过测试结果判断代码的改动是否影响已确定的结果。</p><p>所以，应用的 Controller、Service、Common、Manager 等代码，都必须有对应的单元测试保证代码质量。 当然，框架和插件的每个功能改动和重构都需要有相应的单元测试，并且要求尽量做到修改的代码能被 100% 覆盖到。</p><p>特别是中大型项目，经过多年的代码迭代，业务逻辑复杂，代码改动很容易牵一发动全身， 单元测试就能给应用的稳定性提供了一层保障。不用面对qa的灵魂拷问：</p>',11)),i(r,{color:"#ff603f"},{default:o(()=>t[0]||(t[0]=[e("为什么老是你的bug最多！")])),_:1}),t[5]||(t[5]=l("h2",{id:"二、单测是手段不是目的",tabindex:"-1"},[e("二、单测是手段不是目的 "),l("a",{class:"header-anchor",href:"#二、单测是手段不是目的","aria-label":'Permalink to "二、单测是手段不是目的"'},"​")],-1)),t[6]||(t[6]=l("blockquote",null,[l("p",null,"单测行覆盖率高不代表应用的质量就一定高,但是单测行覆盖率低一定代表着这个应用出现质量问题的可能性就越大")],-1)),l("p",null,[t[2]||(t[2]=e("还是引用前面话,我们不要为了单测而写单测,如果是把单测当做是目的来做,那么就偏离了单测的意义,自然而然你就认为 这个单测的成本是高的。... ... ... ... ... ... ... ")),i(r,{color:"#ff603f"},{default:o(()=>t[1]||(t[1]=[e("你品你细品")])),_:1})]),t[7]||(t[7]=l("p",null,[l("img",{src:"https://img.springlearn.cn/blog/learn_1618049846000.png",alt:""})],-1)),t[8]||(t[8]=l("h2",{id:"三、软件的质量不是测试出来的-而是设计和维护出来的",tabindex:"-1"},[e("三、软件的质量不是测试出来的，而是设计和维护出来的 "),l("a",{class:"header-anchor",href:"#三、软件的质量不是测试出来的-而是设计和维护出来的","aria-label":'Permalink to "三、软件的质量不是测试出来的，而是设计和维护出来的"'},"​")],-1)),i(r,{color:"#ff603f"},{default:o(()=>t[3]||(t[3]=[e("你品你细品")])),_:1}),t[9]||(t[9]=l("p",null,[l("img",{src:"https://img.springlearn.cn/blog/learn_1618206722000.png",alt:""})],-1)),t[10]||(t[10]=l("p",null,"作为底层开发人员, 我们清晰每一行代码, 也就是最小执行单元。哪里容易出现错误，这次改造涉及到了那些代码。一线开发人员一定是最清楚的人,没有之一。",-1)),t[11]||(t[11]=l("p",null,"从这个角度来了, 这就不是成本的问题了, 是职责范围内的事情。",-1)),t[12]||(t[12]=l("p",null,"如果单元测试都不做,就好比我去街上买鸡蛋, 我问老板鸡蛋是好是坏, 老板说我不知道, 然后说坏了拿来可以换。 你认为那个成本更大呢? 那个代价更大呢? 玩意坏鸡蛋把人吃坏了，这老板岂不是赔了夫人又折兵,还要受到法律的制裁?",-1))])}const P=a(d,[["render",f]]);export{N as __pageData,P as default};
