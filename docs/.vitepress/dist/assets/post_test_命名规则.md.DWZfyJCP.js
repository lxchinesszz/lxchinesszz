import{_ as o,c as n,m as e,a,H as s,w as l,aa as i,D as p,o as d}from"./chunks/framework.FHBy0zsw.js";const k=JSON.parse('{"title":"命名规则","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"命名规则","category":"单测规范"},"headers":[],"relativePath":"post/test/命名规则.md","filePath":"post/test/命名规则.md"}'),u={name:"post/test/命名规则.md"};function c(m,t,g,f,b,h){const r=p("Highlight");return d(),n("div",null,[t[2]||(t[2]=e("div",{class:"info custom-block"},[e("p",{class:"custom-block-title"},"命名规则"),e("p",null,[a("单测类: 类名 + "),e("code",null,"Test"),a(" 整体大驼峰")]),e("p",null,[a("单测方法: "),e("code",null,"test"),a(" + 方法名 整体小驼峰")])],-1)),t[3]||(t[3]=e("h3",{id:"保证目录结构是一致的",tabindex:"-1"},[a("保证目录结构是一致的 "),e("a",{class:"header-anchor",href:"#保证目录结构是一致的","aria-label":'Permalink to "保证目录结构是一致的"'},"​")],-1)),e("p",null,[t[1]||(t[1]=a("在这里有个误区,发现很多同学都是随意去创建测试类,其实这不是一个好的习惯,在Maven项目中, 要尽量保证测试类与被测类的目录结构是一致的。如下图一样。这样的好处是,我们可以快速在 这两个类中进行快捷键跳转,也方便我们去新增测试方法。")),s(r,{color:"green"},{default:l(()=>t[0]||(t[0]=[a("跳转快捷键和创建快捷键保持一致,见下文.")])),_:1})]),t[4]||(t[4]=i('<p><img src="https://img.springlearn.cn/blog/learn_1618123124000.png" alt=""></p><p>其实Idea已经为我们提供了快捷操作,如下图。</p><p><img src="https://java.springlearn.cn/junit.gif" alt=""></p><h3 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h3><p><img src="https://img.springlearn.cn/blog/learn_1618036976000.png" alt=""></p>',5))])}const v=o(u,[["render",c]]);export{k as __pageData,v as default};
