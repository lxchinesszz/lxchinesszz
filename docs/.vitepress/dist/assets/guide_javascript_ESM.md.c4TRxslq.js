import{_ as i,c as a,aa as n,o as e}from"./chunks/framework.CC62xl_U.js";const c=JSON.parse('{"title":"CommonJs和ECMAScript","description":"","frontmatter":{"title":"CommonJs和ECMAScript","editLink":true,"navbar":true,"category":"JavaScript"},"headers":[],"relativePath":"guide/javascript/ESM.md","filePath":"guide/javascript/ESM.md"}'),l={name:"guide/javascript/ESM.md"};function t(p,s,r,h,o,k){return e(),a("div",null,s[0]||(s[0]=[n(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>CommonJs（CommonJS）和ESMJs（通常简称为ESM，即ECMAScript Modules）是JavaScript中两种主要的模块化规范，它们在多个方面存在显著的区别。以下是它们之间主要差异的详细对比：</p></div><h3 id="_1-适用环境" tabindex="-1">1. 适用环境 <a class="header-anchor" href="#_1-适用环境" aria-label="Permalink to &quot;1. 适用环境&quot;">​</a></h3><ul><li><strong>CommonJS</strong>：主要适用于Node.js环境，是Node.js打包JavaScript代码的原始方法。</li><li><strong>ESM (ECMAScript Modules)</strong>：是ECMAScript标准中定义的模块化规范，也称为ES6模块。它适用于现代浏览器和Node.js环境，是官方引入的模块化规范。</li></ul><h3 id="_2-加载方式" tabindex="-1">2. 加载方式 <a class="header-anchor" href="#_2-加载方式" aria-label="Permalink to &quot;2. 加载方式&quot;">​</a></h3><ul><li><strong>CommonJS</strong>：采用同步加载模块的方式。当使用<code>require</code> 函数加载模块时，会阻塞后续代码的执行，直到模块加载完成。这种方式在Node.js中较为合适，因为Node.js中的IO操作通常不是性能瓶颈。</li><li><strong>ESM</strong>：支持异步加载模块。使用<code>import</code>语句加载模块时，可以在运行时动态加载模块，这有助于优化性能，特别是在浏览器环境中，网络请求是性能瓶颈。</li></ul><h3 id="_3-导出与导入语法" tabindex="-1">3. 导出与导入语法 <a class="header-anchor" href="#_3-导出与导入语法" aria-label="Permalink to &quot;3. 导出与导入语法&quot;">​</a></h3><ul><li><strong>CommonJS</strong>：使用<code>module.exports</code>或<code>exports</code>来导出模块内容,扩展名为.cjs的文件，通过<code>require</code>函数来导入模块。 <ul><li>当扩展名为.js的文件，且离自己最近的package.json文件包含一个顶级字段“type”，其值为“commonjs”；</li><li>扩展名为.js的文件，且离自己最近的package.json文件不包含一个顶级字段“type”(建议明确指定 type值，而不是不定义)；</li></ul></li></ul><p>示例（导出）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 导出模块</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myVariable: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, CommonJS!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>示例（导入）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 引入模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  myModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule.myVariable);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p><strong>ESM</strong>：使用<code>export</code>关键字来导出模块内容,扩展名为 .mjs 的文件；通过<code>import</code>语句来导入模块。</p><ul><li>当扩展名为.js的文件，且离自己最近的package.json文件包含一个顶级字段“type”，其值为“module”，也会当做是 ESM.</li></ul><p>示例（导出）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myVariable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello, ES Modules!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>示例（导入）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { myFunction, myVariable } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./myModule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myVariable);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="_4-缓存机制" tabindex="-1">4. 缓存机制 <a class="header-anchor" href="#_4-缓存机制" aria-label="Permalink to &quot;4. 缓存机制&quot;">​</a></h3><ul><li><strong>CommonJS</strong>：具有缓存机制。当再次使用<code>require</code>加载相同模块时，会直接从缓存中返回，不会重新加载模块。</li><li><strong>ESM</strong>：没有内置的缓存机制。每次使用<code>import</code>导入模块时，都会重新加载模块。</li></ul><h3 id="_5-静态与动态特性" tabindex="-1">5. 静态与动态特性 <a class="header-anchor" href="#_5-静态与动态特性" aria-label="Permalink to &quot;5. 静态与动态特性&quot;">​</a></h3><ul><li><strong>CommonJS</strong>：<code>require</code>是动态的，可以在运行时改变导入的内容（尽管这在实际应用中并不常见）。</li><li><strong>ESM</strong>：<code>import</code>/<code>export</code>是静态的，在代码编写时就必须确定要导入或导出的内容，这有利于编译时优化和静态分析。</li></ul>`,16)]))}const u=i(l,[["render",t]]);export{c as __pageData,u as default};
