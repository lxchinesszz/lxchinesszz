import{_ as d,c as a,aa as r,o as e}from"./chunks/framework.swcE7GHT.js";const b=JSON.parse('{"title":"Java代码规范全部奉上","description":"","frontmatter":{"title":"Java代码规范全部奉上","editLink":true,"navbar":true},"headers":[],"relativePath":"design/Java代码规范全部奉上.md","filePath":"design/Java代码规范全部奉上.md"}'),n={name:"design/Java代码规范全部奉上.md"};function s(o,t,l,i,p,h){return e(),a("div",null,t[0]||(t[0]=[r(`<p><img src="https://img.springlearn.cn/blog/learn_1598165820000.png" alt=""></p><blockquote><p>写代码就像写文章, 好的代码就像好的文章,结构严谨,构思清晰。写代码就像写文章, 一不留神就成流水账，为避免这种情况作为软件开发工程师，重要的是设计而不是实现。</p></blockquote><p><strong>在一个团队中,由于不同经验的开发导致编程风格可能会出现非常混乱的情况,从而导致开发成本上升。难以维护。所以代码规范就显得异常重要了。</strong></p><p>本篇文章就是给出编程命名的建议,仅供参考,但是其目的是为了统一规范,提高编程能力,降低开发成本,减少代码维护成本。</p><p>契约精神: 做到有法可依，有章可循。</p><h2 id="一、类命名" tabindex="-1">一、类命名 <a class="header-anchor" href="#一、类命名" aria-label="Permalink to &quot;一、类命名&quot;">​</a></h2><h3 id="_1-抽象类" tabindex="-1">1. 抽象类 <a class="header-anchor" href="#_1-抽象类" aria-label="Permalink to &quot;1. 抽象类&quot;">​</a></h3><p>适用的设计模式为模板模式。抽象是自下往上的设计。由具体实现推断出抽象方法。建议以Abstract开头。</p><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>Abstract 或者 Base 开头</td><td>BaseUserService、AbstractUserService</td></tr></tbody></table><h3 id="_2-枚举类" tabindex="-1">2. 枚举类 <a class="header-anchor" href="#_2-枚举类" aria-label="Permalink to &quot;2. 枚举类&quot;">​</a></h3><ul><li>枚举是由JVM来保证的单例。可以用来做单例类。</li><li>枚举类常用作值判断,不建议每次进行循环判断得到实例。建议由内部维护一个map类型,当做cache。此方法建议放在static静态代码块中实现</li></ul><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>Enum 作为后缀</td><td>GenderEnum</td></tr></tbody></table><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public enum ProtocolEnum {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * ECHO协议</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    ECHO(1, null),</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * mojito协议</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    MOJITO(2, MojitoProtocol.class);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private byte type;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private Class&lt;? extends Protocol&gt; protocol;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static Map&lt;Byte, ProtocolEnum&gt; cache = new HashMap&lt;&gt;();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    static {</span></span>
<span class="line"><span>        for (ProtocolEnum protocolEnum : values()) {</span></span>
<span class="line"><span>            cache.put(protocolEnum.type, protocolEnum);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static ProtocolEnum byType(byte type) {</span></span>
<span class="line"><span>        return cache.get(type);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="_3-工具类" tabindex="-1">3. 工具类 <a class="header-anchor" href="#_3-工具类" aria-label="Permalink to &quot;3. 工具类&quot;">​</a></h3><p>工具类常为无状态对象,无状态对象都是线程安全对象,建议使用 <code>final</code> 修饰。</p><p>工具类中避免出现业务属性, 如果出现业务属性,抽象出领域层</p><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>Utils作为后缀</td><td>StringUtils</td></tr></tbody></table><h3 id="_4-异常类" tabindex="-1">4. 异常类 <a class="header-anchor" href="#_4-异常类" aria-label="Permalink to &quot;4. 异常类&quot;">​</a></h3><p>建议保持异常链。</p><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>Exception结尾</td><td>RuntimeException</td></tr></tbody></table><h3 id="_5-接口实现类" tabindex="-1">5. 接口实现类 <a class="header-anchor" href="#_5-接口实现类" aria-label="Permalink to &quot;5. 接口实现类&quot;">​</a></h3><p>众所周知</p><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>接口名+ Impl</td><td>UserServiceImpl</td></tr></tbody></table><h3 id="_6-设计模式相关类" tabindex="-1">6. 设计模式相关类 <a class="header-anchor" href="#_6-设计模式相关类" aria-label="Permalink to &quot;6. 设计模式相关类&quot;">​</a></h3><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>Builder，Factory等</td><td>当使用到设计模式时，需要使用对应的设计模式作为后缀，如ThreadFactory</td></tr></tbody></table><p><img src="https://img.springlearn.cn/27c9d5187cd283f8d160ec1ed2b5ac89.jpg" alt=""></p><h3 id="_7-处理特定功能的" tabindex="-1">7. 处理特定功能的 <a class="header-anchor" href="#_7-处理特定功能的" aria-label="Permalink to &quot;7. 处理特定功能的&quot;">​</a></h3><p>其主要的目的是代码可重复使用。</p><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>Handler，Predicate, Validator</td><td>表示处理器，校验器，断言，这些类工厂还有配套的方法名如handle，predicate，validate</td></tr></tbody></table><h3 id="_8-测试类" tabindex="-1">8. 测试类 <a class="header-anchor" href="#_8-测试类" aria-label="Permalink to &quot;8. 测试类&quot;">​</a></h3><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>Test结尾</td><td>UserServiceTest， 表示用来测试UserService类的</td></tr></tbody></table><h3 id="_9-领域模型载体" tabindex="-1">9. 领域模型载体 <a class="header-anchor" href="#_9-领域模型载体" aria-label="Permalink to &quot;9. 领域模型载体&quot;">​</a></h3><table><thead><tr><th>建议</th><th>示例</th></tr></thead><tbody><tr><td>DTO/*Request</td><td>数据传输对象</td></tr><tr><td>BO</td><td>业务对象</td></tr><tr><td>VO</td><td>数据展示对象,用于承载页面数据</td></tr><tr><td>DO</td><td>数据持久化对象</td></tr></tbody></table><h2 id="二、方法命名" tabindex="-1">二、方法命名 <a class="header-anchor" href="#二、方法命名" aria-label="Permalink to &quot;二、方法命名&quot;">​</a></h2><p>参考于网络。</p><h3 id="_1-布尔判断方法" tabindex="-1">1. 布尔判断方法 <a class="header-anchor" href="#_1-布尔判断方法" aria-label="Permalink to &quot;1. 布尔判断方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>位置</strong></th><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>Prefix</td><td>is</td><td>对象是否符合期待的状态</td><td>isValid</td></tr><tr><td>Prefix</td><td>can</td><td>对象<strong>能否执行</strong>所期待的动作</td><td>canRemove</td></tr><tr><td>Prefix</td><td>should</td><td>调用方执行某个命令或方法是<strong>好还是不好</strong>,<strong>应不应该</strong>，或者说<strong>推荐还是不推荐</strong></td><td>shouldMigrate</td></tr><tr><td>Prefix</td><td>has</td><td>对象<strong>是否持有</strong>所期待的数据和属性</td><td>hasObservers</td></tr><tr><td>Prefix</td><td>needs</td><td>调用方<strong>是否需要</strong>执行某个命令或方法</td><td>needsMigrate</td></tr></tbody></table><h3 id="_2-检查的方法" tabindex="-1">2. 检查的方法 <a class="header-anchor" href="#_2-检查的方法" aria-label="Permalink to &quot;2. 检查的方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>ensure</td><td>检查是否为期待的状态，不是则抛出异常或返回error code</td><td>ensureCapacity</td></tr><tr><td>validate</td><td>检查是否为正确的状态，不是则抛出异常或返回error code</td><td>validateInputs</td></tr></tbody></table><h3 id="_3-按需求才执行的方法" tabindex="-1">3. 按需求才执行的方法 <a class="header-anchor" href="#_3-按需求才执行的方法" aria-label="Permalink to &quot;3. 按需求才执行的方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>位置</strong></th><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>Suffix</td><td>IfNeeded</td><td>需要的时候执行，不需要的时候什么都不做</td><td>drawIfNeeded</td></tr><tr><td>Prefix</td><td>might</td><td>同上</td><td>mightCreate</td></tr><tr><td>Prefix</td><td>try</td><td>尝试执行，失败时抛出异常或是返回errorcode</td><td>tryCreate</td></tr><tr><td>Suffix</td><td>OrDefault</td><td>尝试执行，失败时返回默认值</td><td>getOrDefault</td></tr><tr><td>Suffix</td><td>OrElse</td><td>尝试执行、失败时返回实际参数中指定的值</td><td>getOrElse</td></tr><tr><td>Prefix</td><td>force</td><td>强制尝试执行。error抛出异常或是返回值</td><td>forceCreate, forceStop</td></tr></tbody></table><h3 id="_4-异步相关方法" tabindex="-1">4. 异步相关方法 <a class="header-anchor" href="#_4-异步相关方法" aria-label="Permalink to &quot;4. 异步相关方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>位置</strong></th><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>Prefix</td><td>blocking</td><td>线程阻塞方法</td><td>blockingGetUser</td></tr><tr><td>Suffix</td><td>InBackground</td><td>执行在后台的线程</td><td>doInBackground</td></tr><tr><td>Suffix</td><td>Async</td><td>异步方法</td><td>sendAsync</td></tr><tr><td>Suffix</td><td>Sync</td><td>对应已有异步方法的同步方法</td><td>sendSync</td></tr><tr><td>Prefix or Alone</td><td>schedule</td><td>Job和Task放入队列</td><td>schedule, scheduleJob</td></tr><tr><td>Prefix or Alone</td><td>post</td><td>同上</td><td>postJob</td></tr><tr><td>Prefix or Alone</td><td>execute</td><td>执行异步方法（注：我一般拿这个做同步方法名）</td><td>execute, executeTask</td></tr><tr><td>Prefix or Alone</td><td>start</td><td>同上</td><td>start, startJob</td></tr><tr><td>Prefix or Alone</td><td>cancel</td><td>停止异步方法</td><td>cancel, cancelJob</td></tr><tr><td>Prefix or Alone</td><td>stop</td><td>同上</td><td>stop, stopJob</td></tr></tbody></table><h3 id="_5-回调方法" tabindex="-1">5. 回调方法 <a class="header-anchor" href="#_5-回调方法" aria-label="Permalink to &quot;5. 回调方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>位置</strong></th><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>Prefix</td><td>on</td><td>事件发生时执行</td><td>onCompleted</td></tr><tr><td>Prefix</td><td>before</td><td>事件发生前执行</td><td>beforeUpdate</td></tr><tr><td>Prefix</td><td>pre</td><td>同上</td><td>preUpdate</td></tr><tr><td>Prefix</td><td>will</td><td>同上</td><td>willUpdate</td></tr><tr><td>Prefix</td><td>after</td><td>事件发生后执行</td><td>afterUpdate</td></tr><tr><td>Prefix</td><td>post</td><td>同上</td><td>postUpdate</td></tr><tr><td>Prefix</td><td>did</td><td>同上</td><td>didUpdate</td></tr><tr><td>Prefix</td><td>should</td><td>确认事件是否可以发生时执行</td><td>shouldUpdate</td></tr></tbody></table><h3 id="_6-操作对象生命周期的方法" tabindex="-1">6. 操作对象生命周期的方法 <a class="header-anchor" href="#_6-操作对象生命周期的方法" aria-label="Permalink to &quot;6. 操作对象生命周期的方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>initialize</td><td>初始化。也可作为延迟初始化使用</td><td>initialize</td></tr><tr><td>pause</td><td>暂停</td><td>onPause ，pause</td></tr><tr><td>stop</td><td>停止</td><td>onStop，stop</td></tr><tr><td>abandon</td><td>销毁的替代</td><td>abandon</td></tr><tr><td>destroy</td><td>同上</td><td>destroy</td></tr><tr><td>dispose</td><td>同上</td><td>dispose</td></tr></tbody></table><h3 id="_7-与集合操作相关的方法" tabindex="-1">7. 与集合操作相关的方法 <a class="header-anchor" href="#_7-与集合操作相关的方法" aria-label="Permalink to &quot;7. 与集合操作相关的方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>contains</td><td>是否持有与指定对象相同的对象</td><td>contains</td></tr><tr><td>add</td><td>添加</td><td>addJob</td></tr><tr><td>append</td><td>添加</td><td>appendJob</td></tr><tr><td>insert</td><td>插入到下标n</td><td>insertJob</td></tr><tr><td>put</td><td>添加与key对应的元素</td><td>putJob</td></tr><tr><td>remove</td><td>移除元素</td><td>removeJob</td></tr><tr><td>enqueue</td><td>添加到队列的最末位</td><td>enqueueJob</td></tr><tr><td>dequeue</td><td>从队列中头部取出并移除</td><td>dequeueJob</td></tr><tr><td>push</td><td>添加到栈头</td><td>pushJob</td></tr><tr><td>pop</td><td>从栈头取出并移除</td><td>popJob</td></tr><tr><td>peek</td><td>从栈头取出但不移除</td><td>peekJob</td></tr><tr><td>find</td><td>寻找符合条件的某物</td><td>findById</td></tr></tbody></table><h3 id="_8-数据增删改查相关的方法" tabindex="-1">8. 数据增删改查相关的方法 <a class="header-anchor" href="#_8-数据增删改查相关的方法" aria-label="Permalink to &quot;8. 数据增删改查相关的方法&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>单词</strong></th><th><strong>意义</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>create</td><td>新创建</td><td>createAccount</td></tr><tr><td>new</td><td>新创建</td><td>newAccount</td></tr><tr><td>from</td><td>从既有的某物新建，或是从其他的数据新建</td><td>fromConfig</td></tr><tr><td>to</td><td>转换</td><td>toString</td></tr><tr><td>update</td><td>更新既有某物</td><td>updateAccount</td></tr><tr><td>load</td><td>读取</td><td>loadAccount</td></tr><tr><td>fetch</td><td>远程读取</td><td>fetchAccount</td></tr><tr><td>delete</td><td>删除</td><td>deleteAccount</td></tr><tr><td>remove</td><td>删除</td><td>removeAccount</td></tr><tr><td>save</td><td>保存</td><td>saveAccount</td></tr><tr><td>store</td><td>保存</td><td>storeAccount</td></tr><tr><td>commit</td><td>保存</td><td>commitChange</td></tr><tr><td>apply</td><td>保存或应用</td><td>applyChange</td></tr><tr><td>clear</td><td>清除数据或是恢复到初始状态</td><td>clearAll</td></tr><tr><td>reset</td><td>清除数据或是恢复到初始状态</td><td>resetAll</td></tr></tbody></table><h3 id="_9-成对出现的动词" tabindex="-1">9. 成对出现的动词 <a class="header-anchor" href="#_9-成对出现的动词" aria-label="Permalink to &quot;9. 成对出现的动词&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th><strong>单词</strong></th><th><strong>意义</strong></th></tr></thead><tbody><tr><td>get获取</td><td>set 设置</td></tr><tr><td>add 增加</td><td>remove 删除</td></tr><tr><td>create 创建</td><td>destory 移除</td></tr><tr><td>start 启动</td><td>stop 停止</td></tr><tr><td>open 打开</td><td>close 关闭</td></tr><tr><td>read 读取</td><td>write 写入</td></tr><tr><td>load 载入</td><td>save 保存</td></tr><tr><td>create 创建</td><td>destroy 销毁</td></tr><tr><td>begin 开始</td><td>end 结束</td></tr><tr><td>backup 备份</td><td>restore 恢复</td></tr><tr><td>import 导入</td><td>export 导出</td></tr><tr><td>split 分割</td><td>merge 合并</td></tr><tr><td>inject 注入</td><td>extract 提取</td></tr><tr><td>attach 附着</td><td>detach 脱离</td></tr><tr><td>bind 绑定</td><td>separate 分离</td></tr><tr><td>view 查看</td><td>browse 浏览</td></tr><tr><td>edit 编辑</td><td>modify 修改</td></tr><tr><td>select 选取</td><td>mark 标记</td></tr><tr><td>copy 复制</td><td>paste 粘贴</td></tr><tr><td>undo 撤销</td><td>redo 重做</td></tr><tr><td>insert 插入</td><td>delete 移除</td></tr><tr><td>add 加入</td><td>append 添加</td></tr><tr><td>clean 清理</td><td>clear 清除</td></tr><tr><td>index 索引</td><td>sort 排序</td></tr><tr><td>find 查找</td><td>search 搜索</td></tr><tr><td>increase 增加</td><td>decrease 减少</td></tr><tr><td>play 播放</td><td>pause 暂停</td></tr><tr><td>launch 启动</td><td>run 运行</td></tr><tr><td>compile 编译</td><td>execute 执行</td></tr><tr><td>debug 调试</td><td>trace 跟踪</td></tr><tr><td>observe 观察</td><td>listen 监听</td></tr><tr><td>build 构建</td><td>publish 发布</td></tr><tr><td>input 输入</td><td>output 输出</td></tr><tr><td>encode 编码</td><td>decode 解码</td></tr><tr><td>encrypt 加密</td><td>decrypt 解密</td></tr><tr><td>compress 压缩</td><td>decompress 解压缩</td></tr><tr><td>pack 打包</td><td>unpack 解包</td></tr><tr><td>parse 解析</td><td>emit 生成</td></tr><tr><td>connect 连接</td><td>disconnect 断开</td></tr><tr><td>send 发送</td><td>receive 接收</td></tr><tr><td>download 下载</td><td>upload 上传</td></tr><tr><td>refresh 刷新</td><td>synchronize 同步</td></tr><tr><td>update 更新</td><td>revert 复原</td></tr><tr><td>lock 锁定</td><td>unlock 解锁</td></tr><tr><td>check out 签出</td><td>check in 签入</td></tr><tr><td>submit 提交</td><td>commit 交付</td></tr><tr><td>push 推</td><td>pull 拉</td></tr><tr><td>expand 展开</td><td>collapse 折叠</td></tr><tr><td>begin 起始</td><td>end 结束</td></tr><tr><td>start 开始</td><td>finish 完成</td></tr><tr><td>enter 进入</td><td>exit 退出</td></tr><tr><td>abort 放弃</td><td>quit 离开</td></tr><tr><td>obsolete 废弃</td><td>depreciate 废旧</td></tr><tr><td>collect 收集</td><td>aggregate 聚集</td></tr></tbody></table><h3 id="_10-获取必须的参数" tabindex="-1">10. 获取必须的参数 <a class="header-anchor" href="#_10-获取必须的参数" aria-label="Permalink to &quot;10. 获取必须的参数&quot;">​</a></h3><table><thead><tr><th>getRequiredProperty</th><th>获取必须的参数,否则报错,该方法一般都要抛出异常</th></tr></thead><tbody><tr><td>getProperty</td><td>非必须参数,可以返回null，不报错，调用方自行判断处理逻辑</td></tr></tbody></table><h3 id="_11-获取数据并对数据进行某种处理" tabindex="-1">11. 获取数据并对数据进行某种处理 <a class="header-anchor" href="#_11-获取数据并对数据进行某种处理" aria-label="Permalink to &quot;11. 获取数据并对数据进行某种处理&quot;">​</a></h3><p>注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例子</th></tr></thead><tbody><tr><td>Prefix</td><td>resolve</td><td>解决某些问题,比如对文本占位符进行填充,并获取到填充后的值</td><td>resolvePlaceholders</td></tr><tr><td>Suffix</td><td>Placeholders</td><td>占位符相关命名</td><td>resolvePlaceholders</td></tr></tbody></table><h2 id="三、方法编程建议" tabindex="-1">三、方法编程建议 <a class="header-anchor" href="#三、方法编程建议" aria-label="Permalink to &quot;三、方法编程建议&quot;">​</a></h2><h3 id="_1-方法复杂度" tabindex="-1">1. 方法复杂度 <a class="header-anchor" href="#_1-方法复杂度" aria-label="Permalink to &quot;1. 方法复杂度&quot;">​</a></h3><p>凡是逻辑判断语句均为复杂度。当一个方法中出现了大于等于10个复杂度。建议根据</p><p>方法实现进行业务抽离。两个建议点(1. 方法单一职责 2. 方法可重复利用 3. 是否能用策略模式或者命令模式)</p><h3 id="_2-方法长度及宽度" tabindex="-1">2.方法长度及宽度 <a class="header-anchor" href="#_2-方法长度及宽度" aria-label="Permalink to &quot;2.方法长度及宽度&quot;">​</a></h3><p>长度: 方法的长度建议控制在80-120行以内。满足一屏可以放下。 宽度: 当方法超过3个及以上入参,建议使用对象封装(对象容易后期扩展,且不会出现眼花缭乱现象)</p><h3 id="_3-关注方法优化编辑器提示" tabindex="-1">3.关注方法优化编辑器提示 <a class="header-anchor" href="#_3-关注方法优化编辑器提示" aria-label="Permalink to &quot;3.关注方法优化编辑器提示&quot;">​</a></h3><p>减少出现黄色警告⚠️, 最好不要出现警告。编辑器的警告都是优化点,需要在编程时候考虑进去。</p><p>eg: 性能优化、命名不规范、重复代码</p><p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/21643544635/2678603850/7fbfc8ab-22ca-4f92-be04-31c4d1b704e3.png" alt="img"></p><h3 id="_4-方法重复代码" tabindex="-1">4.方法重复代码 <a class="header-anchor" href="#_4-方法重复代码" aria-label="Permalink to &quot;4.方法重复代码&quot;">​</a></h3><p>贫血模型的标志性问题</p><p>重复代码编辑器会提出警告,此种现象,强烈建议不要出现</p><h3 id="_5-方法注释" tabindex="-1">5. 方法注释 <a class="header-anchor" href="#_5-方法注释" aria-label="Permalink to &quot;5. 方法注释&quot;">​</a></h3><p>注释是必须要做的(先写注释在做实现)，重在设计。</p><p>代码是公司财产, 要对自己对公司对后人负责,先写注释再做实现。</p><h2 id="四、项目依赖模型" tabindex="-1">四、项目依赖模型 <a class="header-anchor" href="#四、项目依赖模型" aria-label="Permalink to &quot;四、项目依赖模型&quot;">​</a></h2><h3 id="_1-领域设计的认识" tabindex="-1">1. 领域设计的认识 <a class="header-anchor" href="#_1-领域设计的认识" aria-label="Permalink to &quot;1. 领域设计的认识&quot;">​</a></h3><p>领域划分,用另外一个词形容也非常的合适,就是业务模块化。所有能力都进行能力化抽象,形成模块,形成领域。 当遇到新的业务逻辑,底层的数据结构和数据关系肯定也是一样的。那么就可以像堆积木一样,根据这些模块快速的组装成新的业务逻辑。快速的实现业务的迭代和升级。</p><p>关于这个问题,需要结合自己的业务系统来进行抽象和设计。</p><p>设计核心: 用面向对象的设计思想对业务进行解耦来做到领域划分。</p><h3 id="_2-层次划分" tabindex="-1">2. 层次划分 <a class="header-anchor" href="#_2-层次划分" aria-label="Permalink to &quot;2. 层次划分&quot;">​</a></h3><h4 id="基础层-外部调用-db操作" tabindex="-1">基础层(外部调用,db操作) <a class="header-anchor" href="#基础层-外部调用-db操作" aria-label="Permalink to &quot;基础层(外部调用,db操作)&quot;">​</a></h4><p>注意: 基础层只做适配不做业务</p><ul><li>db操作以dao结尾</li><li>外部调用以Client(Http协议)/Instruction(Rpc协议) <ul><li>改层仅仅做数据适配,不做业务处理。</li></ul></li></ul><h4 id="领域层-偏向领域的业务逻辑" tabindex="-1">领域层(偏向领域的业务逻辑) <a class="header-anchor" href="#领域层-偏向领域的业务逻辑" aria-label="Permalink to &quot;领域层(偏向领域的业务逻辑)&quot;">​</a></h4><p>以Manager</p><h4 id="业务层-对领域层的业务编排" tabindex="-1">业务层(对领域层的业务编排) <a class="header-anchor" href="#业务层-对领域层的业务编排" aria-label="Permalink to &quot;业务层(对领域层的业务编排)&quot;">​</a></h4><p>以Service结尾</p><h4 id="外观层-可以提供能力-可以提供视图-。" tabindex="-1">外观层(可以提供能力,可以提供视图)。 <a class="header-anchor" href="#外观层-可以提供能力-可以提供视图-。" aria-label="Permalink to &quot;外观层(可以提供能力,可以提供视图)。&quot;">​</a></h4><p>以Resource、Facade结尾</p><p>有一个完善的领域层,可以方便快速便捷的对业务进行扩展。与其对立的就是贫血模型。没有领域层只有业务层,业务逻辑都堆积在业务层。典型的面向过程设计。</p><p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/21643544635/2678603850/8be6e99c-f5e9-4a8a-bce4-85f5aa3717e7.png" alt="img"></p><h3 id="_3-层次依赖模型" tabindex="-1">3. 层次依赖模型 <a class="header-anchor" href="#_3-层次依赖模型" aria-label="Permalink to &quot;3. 层次依赖模型&quot;">​</a></h3><p>maven多模块应用和单模块应用通用。</p><p>一定要控制项目的依赖情况。</p><p>①service只能出现领域层的依赖, 领域层只能存在dao层和第三方服务层。</p><p>②各个层代码不能平行调用(出现平行调用逻辑,要抽象出领域层来封装)。</p><p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/21643544635/2678603850/c08a058d-8c81-45c4-bdc4-82d666a304f7.png" alt="img"></p><p>具体代码体现就是</p><ul><li>以Service命名的类,里面只能存在Manager</li><li>以Manager命名的类,里面只能存在Dao和Client(Http协议)/Instruction(Rpc协议)封装的第三方调用</li><li>以Dao命名的类是对数据库的操作</li><li>以Client(Http协议)/Instruction(Rpc协议)命名的类,作为适配层与第三方API进行交互封装</li></ul><h2 id="五、设计模式六大原则" tabindex="-1">五、设计模式六大原则 <a class="header-anchor" href="#五、设计模式六大原则" aria-label="Permalink to &quot;五、设计模式六大原则&quot;">​</a></h2><p>代码编程时候要向以下这6大原则,进行向其靠拢。</p><h3 id="_1-开闭原则" tabindex="-1">1. 开闭原则 <a class="header-anchor" href="#_1-开闭原则" aria-label="Permalink to &quot;1. 开闭原则&quot;">​</a></h3><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p><p><strong>代码设计建议</strong></p><p>用抽象构建框架，用实现扩展细节因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。</p><h3 id="_2-单一职责" tabindex="-1">2. 单一职责 <a class="header-anchor" href="#_2-单一职责" aria-label="Permalink to &quot;2. 单一职责&quot;">​</a></h3><p>不要存在多于一个导致类变更的原因通俗的说，即一个类只负责一项职责。</p><p><strong>代码设计建议</strong></p><p>在具体方法编写或者类编写时候,类编写时候业务要单一,方法编写时候实现要单一</p><p>反例:</p><p>UserService 类中提供了获取商品信息的接口</p><p>setUserName(String name)方法的时候,对name的值进行了二次处理。</p><h3 id="_3-里氏替换原则" tabindex="-1">3. <strong>里氏替换原则</strong> <a class="header-anchor" href="#_3-里氏替换原则" aria-label="Permalink to &quot;3. **里氏替换原则**&quot;">​</a></h3><p>所有引用基类的地方必须能透明地使用其子类的对象。</p><p><strong>代码设计建议</strong></p><p>面向接口编程, 子类能透明替换父类。</p><h3 id="_4-依赖倒置原则" tabindex="-1">4. <strong>依赖倒置原则</strong> <a class="header-anchor" href="#_4-依赖倒置原则" aria-label="Permalink to &quot;4. **依赖倒置原则**&quot;">​</a></h3><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p><p><strong>代码设计建议</strong></p><p>要根据接口或者抽象去设计,不要依赖于细节,eg.项目中要换数据库,不用重新写底层的数据库代码. 就是使用了hibernate一样,替换方言就好了,因为hibernate是根据接口设计的,不同数据库有不同的实现,可以直接使用. eg2: 我生病了要去买药,如果A药铺,没有我就用B药铺买. 因为他们都是药铺,都有一样的功能,可以友好的替换</p><h3 id="_5-接口隔离原则" tabindex="-1"><strong>5. 接口隔离原则</strong> <a class="header-anchor" href="#_5-接口隔离原则" aria-label="Permalink to &quot;**5. 接口隔离原则**&quot;">​</a></h3><p>客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p><p><strong>代码设计建议</strong></p><p>保持最小的责任。</p><p>eg: 接口ConfigurableApplicationContext实现了Lifecycle和Closeable接口。他们其中每个里面定义的接口都很少,为什么不定义到一起呢?</p><p>首先第一责任清晰单一,第二做到接口隔离。</p><p>当某一个方法只用到生命周期的方法,那么方法就可以写成。</p><p>public void stop(Lifecycle lifecycle); 调用时候用-&gt;public void stop(new ConfigurableApplicationContext());</p><p>public void close(Closeable closeable); 调用时候用-&gt;public void close(new ConfigurableApplicationContext());</p><p>stop里面的实现就只能调用Lifecycle里面的方法,而不能调用ConfigurableApplicationContext里面的方法。从而来达到接口隔离原则</p><h3 id="_6-迪米特法则" tabindex="-1">6. <strong>迪米特法则</strong> <a class="header-anchor" href="#_6-迪米特法则" aria-label="Permalink to &quot;6. **迪米特法则**&quot;">​</a></h3><p>一个对象应该对其他对象保持最少的了解。</p><p><strong>代码设计建议</strong></p><p>减少类与类之间的关系,接口隔离也可以做到。</p><h2 id="六、版本迭代" tabindex="-1">六、版本迭代 <a class="header-anchor" href="#六、版本迭代" aria-label="Permalink to &quot;六、版本迭代&quot;">​</a></h2><p>master分支版本后缀 \${大版本号}.\${0进位}.\${迭代版本号}.RELEASE</p><p>test分支版本号 \${大版本号}.\${0进位}.\${迭代版本号}.SNAPSHOP</p><p>迭代版本可追踪，避免出现jar包覆盖无法追踪</p><p>迭代版本升级,必须升级迭代版本号。避免出现jar包覆盖无法追踪</p><h3 id="_1-大版本定义" tabindex="-1">1. 大版本定义 <a class="header-anchor" href="#_1-大版本定义" aria-label="Permalink to &quot;1. 大版本定义&quot;">​</a></h3><p>APP1.0 APP2.0 APP3.0</p><h3 id="_2-迭代版本号" tabindex="-1">2. 迭代版本号 <a class="header-anchor" href="#_2-迭代版本号" aria-label="Permalink to &quot;2. 迭代版本号&quot;">​</a></h3><p>APP1.0.1 APP1.0版本的第一个迭代</p><p>APP1.1.0 APP1.0版本的第十个迭代</p><p>APP2.0.2 APP2.0版本的第二个迭代</p><p>APP2.1.0 APP2.0版本的第十个迭代</p><h2 id="七、代码格式化" tabindex="-1">七、代码格式化 <a class="header-anchor" href="#七、代码格式化" aria-label="Permalink to &quot;七、代码格式化&quot;">​</a></h2><p>统一格式化模板,解决多人共同开发场景,代码格式化导致的git提交冲突问题</p><p>最后求关注,求订阅,谢谢你的阅读!</p><p><img src="https://img.springlearn.cn/blog/learn_1589360371000.png" alt=""></p>`,159)]))}const u=d(n,[["render",s]]);export{b as __pageData,u as default};
