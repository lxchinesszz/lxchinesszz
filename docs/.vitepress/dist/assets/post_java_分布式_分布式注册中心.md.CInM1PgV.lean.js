import{_ as i,o as a,c as n,a4 as e}from"./chunks/framework.B8fosacB.js";const o=JSON.parse('{"title":"第01篇:分布式注册中心","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"第01篇:分布式注册中心","category":"分布式"},"headers":[],"relativePath":"post/java/分布式/分布式注册中心.md","filePath":"post/java/分布式/分布式注册中心.md","lastUpdated":1731158524000}'),l={name:"post/java/分布式/分布式注册中心.md"};function p(t,s,h,r,k,E){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[e(`<p><img src="https://img.springlearn.cn/blog/learn_1652941175000.png" alt=""></p><h2 id="一、什么是注册中心" tabindex="-1">一、什么是注册中心 <a class="header-anchor" href="#一、什么是注册中心" aria-label="Permalink to &quot;一、什么是注册中心&quot;">​</a></h2><p><img src="https://img.springlearn.cn/blog/learn_1652941012000.png" alt=""></p><p>什么是<code>注册中心</code>，<code>注册中心</code> 往往是在分布式的应用体系下才会遇到的。对于分布式体系应用都是横向进行扩展。如下图<code>User App</code>这个服务，具有2台服务器 但是当用户从网关进来访问, 网关是如何知道这个 <code>User App</code>有几台服务及每台服务的网络地址是什么呢? 所以就需要有一个地方能收集到每台应用的地址及命名。 往往这个地方就被叫做 <code>注册中心</code>。分布式环境下的应用在启动时候都会向这个地方来注册自己的网络地址，及命名。</p><h2 id="二、注册中心的职责" tabindex="-1">二、注册中心的职责 <a class="header-anchor" href="#二、注册中心的职责" aria-label="Permalink to &quot;二、注册中心的职责&quot;">​</a></h2><p><img src="https://img.springlearn.cn/blog/learn_1652941926000.png" alt=""></p><p><code>但是注册中心只能注册服务吗?</code> 当然不是,如果仅仅只做这个事情，那么岂不是浪费了自己的资源呢? 注册中心要做到</p><p><img src="https://img.springlearn.cn/blog/learn_1652942499000.png" alt=""></p><p>好了，我们看下再分布式的环境下，注册中心的位置有多<code>重要</code>了，如果没有了注册中心，网络上的服务都是<code>瞎子</code>了。所以这个系统 的设计我们要重新考虑到他的<code>可用性</code>，以及就算注册中心挂了，各服务之间不要里面就瞎。最起码要留给注册中心一个<code>重启的时间</code>。</p><p>好了，知道这么多，我们直接开始设计吧。</p><h2 id="三、设计注册中心" tabindex="-1">三、设计注册中心 <a class="header-anchor" href="#三、设计注册中心" aria-label="Permalink to &quot;三、设计注册中心&quot;">​</a></h2><h2 id="_3-1-ip地址获取" tabindex="-1">3.1 ip地址获取 <a class="header-anchor" href="#_3-1-ip地址获取" aria-label="Permalink to &quot;3.1 ip地址获取&quot;">​</a></h2><p>这里要注意的点是不要拿到了127.0.0.1这个本地回环地址。类似工具网络很多,这不是重点。看下就行。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HostUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String ip;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String hostName;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        InetAddress localHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InetAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localHost.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHostName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localHost.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHostAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (localHost.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLoopbackAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Enumeration&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NetworkInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; networkInterfaces </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NetworkInterface.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNetworkInterfaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (networkInterfaces.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasMoreElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                NetworkInterface networkInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> networkInterfaces.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Enumeration&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">InetAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; inetAddresses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> networkInterface.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInetAddresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (inetAddresses.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasMoreElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    InetAddress inetAddress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inetAddresses.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inetAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLoopbackAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (inetAddress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Inet4Address)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inetAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHostAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHostName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostName;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            resolveHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="_3-2-通信协议-技术选型" tabindex="-1">3.2 通信协议 &amp; 技术选型 <a class="header-anchor" href="#_3-2-通信协议-技术选型" aria-label="Permalink to &quot;3.2 通信协议 &amp; 技术选型&quot;">​</a></h2><p>通信协议一般为了兼容多语言环境, 最好使用的http协议。因为应用比较广泛。当然你也可以自定义协议。这里推荐一个 小编基于Netty封装的通信框架 <a href="https://mojito.springlearn.cn/" target="_blank" rel="noreferrer">mojito</a> 这里我们主要考虑通用性,使用 http协议。因为现在微服务使用 ==Spring Cloud== 的较多，所以我们的注册中心的框架选型使用 ==Spring Boot==</p><p>这里我们可以使用SpringBoot的<a href="/post/java/spring/Endpoint监控端点扩展.html">Endpoint</a> 实现自己的扩展点，同时也可以使用服务自带的健康检查能力,进行状态监控。</p><p>下面描述下实现思路</p><h2 id="_3-3-交互流程" tabindex="-1">3.3 交互流程 <a class="header-anchor" href="#_3-3-交互流程" aria-label="Permalink to &quot;3.3 交互流程&quot;">​</a></h2><h3 id="_3-3-1-服务端能力" tabindex="-1">3.3.1 服务端能力 <a class="header-anchor" href="#_3-3-1-服务端能力" aria-label="Permalink to &quot;3.3.1 服务端能力&quot;">​</a></h3><ul><li>提供服务注册接口 <ul><li>数据可以落到数据库, 同时记录内存缓存，服务量大可以考虑使用redis</li><li>同时要落到文件中, 避免数据库挂了能从文件中恢复到缓存中</li></ul></li><li>提供服务下线接口 <ul><li>当服务下线，主动调用注册中心下线接口，注册中心要提供被动接受下线能力</li><li>当轮训到服务状态不好,主动将服务标记为下线，当服务状态恢复重新标记为正常</li></ul></li><li>提供服务健康检查能力 <ul><li>轮训已注册的机器的健康检查接口，动态更新节点状态</li><li>启动定时任务,定时发送状态检查,检查客户端服务状态</li></ul></li><li>提供服务发现接口 <ul><li>通过传递服务名，返回服务名对应的服务列表</li></ul></li><li>提供应用配置能力 <ul><li>做到服务隔离,不要把某个服务的配置,推送到全部服务器,只需要推动到这个服务对应的节点即可</li><li>能主动发起配置变更消息</li></ul></li></ul><h3 id="_3-3-2-客户端能力" tabindex="-1">3.3.2 客户端能力 <a class="header-anchor" href="#_3-3-2-客户端能力" aria-label="Permalink to &quot;3.3.2 客户端能力&quot;">​</a></h3><ul><li>服务注册能力 <ul><li>实现 <code>ApplicationContextInitializer</code> 应用启动时候读取应用配置,然后将自己注册到注册中心</li><li>将注册中心的配置,同时拉下来,放到Spring配置环境</li></ul></li><li>服务重新或者宕机主动下线 <ul><li>利用<code>@PreDestroy</code>销毁方法,或者注册<a href="/post/java/hooks函数.html">Jvm Hooks</a>程序</li></ul></li><li>服务发现能力 <ul><li>根据服务名获取服务列表接口，同时缓存到本地一份</li><li>如果注册中心无响应，要能使用本地缓存, 给注册中心留一个重启的时间</li></ul></li><li>监听服务器配置信息 <ul><li>将监听到的配置变更刷新到Spring容器 <a href="/post/java/spring/Spring动态绑定配置.html">动态绑定配置方案参考</a></li></ul></li><li>打开健康检查</li></ul><h2 id="四、常见的注册中心" tabindex="-1">四、常见的注册中心 <a class="header-anchor" href="#四、常见的注册中心" aria-label="Permalink to &quot;四、常见的注册中心&quot;">​</a></h2><p><a href="https://blog.csdn.net/sanmi8276/article/details/113513488" target="_blank" rel="noreferrer">注册中心对比</a></p><h2 id="_4-1-zookeeper" tabindex="-1">4.1 Zookeeper <a class="header-anchor" href="#_4-1-zookeeper" aria-label="Permalink to &quot;4.1 Zookeeper&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/62526102" target="_blank" rel="noreferrer">什么是ZooKeeper？</a></p><p>可以用ZooKeeper来做：统一配置管理、统一命名服务、分布式锁、集群管理。</p><p>ZooKeeper的数据结构，跟Unix文件系统非常类似，可以看做是一颗树，每个节点叫做ZNode。每一个节点可以通过路径来标识，结构图如下：</p><p><img src="https://img.springlearn.cn/blog/learn_1653357711000.png" alt=""></p><p>那ZooKeeper这颗&quot;树&quot;有什么特点呢？？ZooKeeper的节点我们称之为Znode，Znode分为两种类型：</p><p>短暂/临时(Ephemeral)：当客户端和服务端断开连接后，所创建的Znode(节点)会自动删除 持久(Persistent)：当客户端和服务端断开连接后，所创建的Znode(节点)不会删除</p><p>另外Zookeeper提供了节点监听的能力,当节点发生变化会发起通知事件。我们可以根据这个特性做一些事情,比如节点被删除就移除注册在这个节点上的服务。</p><p><a href="/post/java/分布式/zookeeper.html">zookeepr api</a></p><h2 id="_4-2-eureka" tabindex="-1">4.2 Eureka <a class="header-anchor" href="#_4-2-eureka" aria-label="Permalink to &quot;4.2 Eureka&quot;">​</a></h2><p><a href="https://blog.csdn.net/buyaoshuohua1/article/details/119620675" target="_blank" rel="noreferrer">Eureka是干什么的?</a> Eureka是SpringBoot默认的注册中心组件。没有配置的能力</p><h2 id="_4-3-consul" tabindex="-1">4.3 Consul <a class="header-anchor" href="#_4-3-consul" aria-label="Permalink to &quot;4.3 Consul&quot;">​</a></h2><p>Consul是用于服务发现和配置的工具。Consul是分布式的，高度可用的，并且具有极高的可伸缩性，而且开发使用都很简便。它提供了一个功能齐全的控制面板，主要特点是：服务发现、健康检查、键值存储、安全服务通信、多数据中心、ServiceMesh。Consul在设计上把很多分布式服务治理上要用到的功能都包含在内了。</p><h2 id="_4-4-nacos" tabindex="-1">4.4 Nacos <a class="header-anchor" href="#_4-4-nacos" aria-label="Permalink to &quot;4.4 Nacos&quot;">​</a></h2><p>Nacos致力于发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您实现动态服务发现、服务配置管理、服务及流量管理。Nacos更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构(例如微服务范式、云原生范式)的服务基础设施。Nacos支持作为RPC注册中心，例如：支持Dubbo框架；也具备微服务注册中心的能力，例如：SpringCloud框架。</p><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h2><p>市面上的注册中心有以上这些，核心逻辑思路都大差不差。其中Consul和Nacos是支持配置的。如果我们开发注册中心的话,没必要研究其源码。 只有当我们要做注册中心,这个时候我们可以去研究下源码。对于一般开发使用,只要知道他是做什么的就好了。</p><p><img src="https://img.springlearn.cn/blog/learn_1653371613000.png" alt=""></p>`,43)]))}const c=i(l,[["render",p]]);export{o as __pageData,c as default};
