import{_ as i,o as a,c as n,a4 as e}from"./chunks/framework.B8fosacB.js";const o=JSON.parse('{"title":"Elastic-Job源码解析(一)之与Spring完美整合","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":true,"footer":true,"backtotop":true,"title":"Elastic-Job源码解析(一)之与Spring完美整合","category":"Elastic-Job"},"headers":[],"relativePath":"post/java/jobs/Elastic-Job源码解析(一)之与Spring完美整合.md","filePath":"post/java/jobs/Elastic-Job源码解析(一)之与Spring完美整合.md","lastUpdated":1731158524000}'),t={name:"post/java/jobs/Elastic-Job源码解析(一)之与Spring完美整合.md"};function p(l,s,r,h,k,d){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[e(`<blockquote><p>看过小编写SpringFramework源码解析的同学应该对Spring支持自定义标签还有点印象吧，没有的话我们回顾下，然后看看Elastic-Job是如何巧妙的利用自定义标签生成Job任务的吧。请注意这里用了一个巧妙关键字。我们看它如何巧妙的吧。</p></blockquote><h2 id="elastic-job-自定义标签原理" tabindex="-1">Elastic Job 自定义标签原理 <a class="header-anchor" href="#elastic-job-自定义标签原理" aria-label="Permalink to &quot;Elastic Job 自定义标签原理&quot;">​</a></h2><p>在Spring中实现自定义标签只用继承NamespaceHandlerSupport类，然后定义自己的BeanDefinitionParse来生成BeanDefinition就可以了。就会被Spring的IOC容器加载到了。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 分布式作业的命名空间处理器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JobNamespaceHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamespaceHandlerSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JobNamespaceHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleJobBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataflow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataflowJobBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScriptJobBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><table><thead><tr><th>类型</th><th>解析器</th><th>描述</th></tr></thead><tbody><tr><td>simple</td><td>SimpleJobBeanDefinitionParser</td><td>一般任务</td></tr><tr><td>dataflow</td><td>DataflowJobBeanDefinitionParser</td><td>数据流任务</td></tr><tr><td>script</td><td>ScriptJobBeanDefinitionParser</td><td>脚本任务</td></tr></tbody></table><p>注册中心解析器</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegNamespaceHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamespaceHandlerSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegNamespaceHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zookeeper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ZookeeperBeanDefinitionParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>在jar中添加 <code>/META-INF/spring.handler</code> 指定文件的解析器</li><li>在jar中添加 <code>/META-INF/spring.schemas</code> 指定文件的xml约束信息</li></ul><p><img src="https://img.springlearn.cn/blog/ded053e68c5fbedda0c82581c80fba2c.png" alt=""></p><h2 id="elastic-job如何巧妙" tabindex="-1">Elastic-Job如何巧妙? <a class="header-anchor" href="#elastic-job如何巧妙" aria-label="Permalink to &quot;Elastic-Job如何巧妙?&quot;">​</a></h2><p>注意: 定时任务 = 定时器 + 任务 Elastic Job只给我们提供了任务标签，所以我们平时用Elastic-Job写的只是一个任务，而不是一个Bean。另外关于标签的属性，即: 定时的信息,是以属性配置的形式放在xml中的,我们可以看xsd文件约束中找到，都有哪些属性可以用，下图</p><p><img src="https://img.springlearn.cn/blog/297f09f2a289942949fb4bfe30722dc0.png" alt=""></p><p><img src="https://img.springlearn.cn/blog/c426616c1337a7ba39da1d2171cb07fd.png" alt=""></p><p>Elastic-Job会解析我们的xml任务信息,并通过定时的相关参数，生成SpringJobScheduler对象,在哪里进行着一操作呢？ 感觉很怪异，找了很久才找到，竟然在每个任务的解析器中。为什么这么说呢? 因为实现都在抽象类中生成。</p><p><img src="https://img.springlearn.cn/blog/d046d029692e7b204f56dc023609ca39.png" alt=""></p><p>所有的任务解析器都实现了一个抽象方法AbstractJobBeanDefinitionParser。而在这里面对我们写的job标签进行了解析生成job对象，作为属性注入到SpringJobScheduler中，在init方法中，开始执行定时 任务(quartz)。</p><p><img src="https://img.springlearn.cn/blog/7c71ed058225816bcd38f1de71836f5f.png" alt=""></p><p>其实BeanDefinitionParse的主要职责是解析Bean对象的，而Elastic-Job巧妙的用来生成SpringJobScheduler。 由此联想到Es Job的标签都是 job:{taskType}开头的，看来命名真的很有技巧，<code>注意他不是一个bean而是SpringJobSchedulerBean的一个参数声明 !</code> 还能这么用! get 到一个新技能。</p><p><strong>另外注意</strong></p><ul><li>①: init初始化方法中完成定时任务的初始化操作，即开始定时，底层还是使用的quartz的一个封装</li><li>②: shutdown回收资源,关闭线程池</li></ul>`,20)]))}const g=i(t,[["render",p]]);export{o as __pageData,g as default};
