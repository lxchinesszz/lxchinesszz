import{_ as e,o as t,c as h,a4 as c}from"./chunks/framework.B8fosacB.js";const u=JSON.parse('{"title":"一致性hash问题","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":false,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"一致性hash问题","category":"缓存","sidebarDepth":3},"headers":[],"relativePath":"post/java/高并发/一致性hash问题.md","filePath":"post/java/高并发/一致性hash问题.md","lastUpdated":null}'),r={name:"post/java/高并发/一致性hash问题.md"};function p(i,a,l,s,n,o){return t(),h("div",{"data-pagefind-body":!0},a[0]||(a[0]=[c('<p><img src="https://img.springlearn.cn/learn_aecfc8e243edb199c726728413b1522c.gif" alt=""></p><h2 id="一、介绍" tabindex="-1">一、介绍 <a class="header-anchor" href="#一、介绍" aria-label="Permalink to &quot;一、介绍&quot;">​</a></h2><p>一致性哈希主要解决的问题,是互联网中的热点问题,及当cache环境改变,能动态感知,避免继续向已经坏掉的空间,插入新值.</p><h2 id="二、不一致会有什么问题" tabindex="-1">二、不一致会有什么问题? <a class="header-anchor" href="#二、不一致会有什么问题" aria-label="Permalink to &quot;二、不一致会有什么问题?&quot;">​</a></h2><h2 id="_2-1-缓存的例子" tabindex="-1">2.1 缓存的例子 <a class="header-anchor" href="#_2-1-缓存的例子" aria-label="Permalink to &quot;2.1 缓存的例子&quot;">​</a></h2><p>有 N 个 cache 服务器（后面简称 cache ），那么如何将一个对象 object 映射到 N 个 cache 上呢，你很可能会采用类似下面的通用方法计算 object 的 hash</p><p>求余算法: hash(Object) % N</p><p>有多个cache: cache[0] cache[1] cache[2] cache[3], 然后要</p><ul><li><p>put 4%4 insert 到cache[0]=A</p></li><li><p>put 1%4 insert 到cache[1]=B</p></li><li><p>put 2%4 insert 到cache[2]=C</p></li><li><p>put 3%4 insert 到cache[3]=D</p></li></ul><p>假如cache[0] A节点突然挂了,此时获取cache[0]会有问题,put 5%3(本来4个节点-1一个节点) insert cache[2] ,之前是插入C,但是之后cache[2]=D,此时,一台错误会对全局产生影响.(因为cache的位置都发生了变化),这样就不能维护hash算法的单调性,可能之前已经插入了,但是后面就要覆盖.</p><p><del>cache[0]=A</del></p><ul><li>cache[0]=B</li><li>cache[1]=C</li><li>cache[2]=D</li></ul><h2 id="_2-3-数据迁移例子" tabindex="-1">2.3 数据迁移例子 <a class="header-anchor" href="#_2-3-数据迁移例子" aria-label="Permalink to &quot;2.3 数据迁移例子&quot;">​</a></h2><p>假如有10条数据，3个节点，如果按照取模的方式。</p><p><img src="https://img.springlearn.cn/blog/learn_1652926998000.png" alt=""></p><p>总结: 数据在增加了一个节点后，3,4,5,6,7,8,9都需要做搬迁，成本太高了</p><p>那么采用一致性hash后怎么样呢?</p><h3 id="_2-3-1-一致性hash如何处理" tabindex="-1">2.3.1 一致性hash如何处理? <a class="header-anchor" href="#_2-3-1-一致性hash如何处理" aria-label="Permalink to &quot;2.3.1 一致性hash如何处理?&quot;">​</a></h3><p>对 a b c 分别做哈希映射</p><p><img src="https://img.springlearn.cn/blog/learn_1652927183000.png" alt=""></p><p>当大于228都存203节点,于是就维护了一个圆形,即所有数据都能找到其节点了</p><p><img src="https://img.springlearn.cn/blog/learn_1652927207000.png" alt=""></p><p>当新加入节点d,可以算出d的hash</p><p>==node d: 216==</p><p><img src="https://img.springlearn.cn/blog/learn_1652927238000.png" alt=""></p><p>对数据进行迁移(其实只影响209~216之间的数,即达到了我们的目的)</p><h2 id="三、总结" tabindex="-1">三、总结 <a class="header-anchor" href="#三、总结" aria-label="Permalink to &quot;三、总结&quot;">​</a></h2><p><code>一致性hash的算法，就是不去确定唯一的下标，而是将节点先形成一个hash环,每次获取当前hash最近的节点。这样就算挂了一个节点，影响也是最小的</code>。</p>',28)]))}const b=e(r,[["render",p]]);export{u as __pageData,b as default};
