import{_ as s,c as i,aa as e,o as n}from"./chunks/framework.FHBy0zsw.js";const c=JSON.parse('{"title":"线程安全感","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"线程安全感","category":"Java进阶"},"headers":[],"relativePath":"post/java/线程安全.md","filePath":"post/java/线程安全.md"}'),l={name:"post/java/线程安全.md"};function t(r,a,p,h,k,o){return n(),i("div",null,a[0]||(a[0]=[e(`<p><img src="https://img.springlearn.cn/blog/learn_1608963968000.png" alt=""></p><p><strong>作者</strong>: 西魏陶渊明 <strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noreferrer">https://blog.springlearn.cn/</a></p><div class="tip custom-block"><p class="custom-block-title">西魏陶渊明</p><p>莫笑少年江湖梦，谁不少年梦江湖</p></div><h1 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h1><blockquote><p>所谓发生线程安全其实是有一个前提条件,即当有多线程时候才会设计到线程安全,单线程是不存在线程安全的问题的。且只有在有状态对象中才会发生。</p></blockquote><h2 id="_1-什么叫有状态对象" tabindex="-1">1. 什么叫有状态对象? <a class="header-anchor" href="#_1-什么叫有状态对象" aria-label="Permalink to &quot;1. 什么叫有状态对象?&quot;">​</a></h2><h3 id="_1-1-无状态对象" tabindex="-1">1.1 无状态对象 <a class="header-anchor" href="#_1-1-无状态对象" aria-label="Permalink to &quot;1.1 无状态对象&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">say</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_1-2-有状态对象" tabindex="-1">1.2 有状态对象 <a class="header-anchor" href="#_1-2-有状态对象" aria-label="Permalink to &quot;1.2 有状态对象&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //实例变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">say</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>为什么说无状态对象不会发生线程安全,线程对公共变量（实例变量，类变量）进行操作才会发生线程安全问题，而方法中变量是保存在每个线程的私有栈中的,所以不存在线程安全问题</p><h2 id="_2-什么时候要保证线程安全" tabindex="-1">2. 什么时候要保证线程安全？ <a class="header-anchor" href="#_2-什么时候要保证线程安全" aria-label="Permalink to &quot;2. 什么时候要保证线程安全？&quot;">​</a></h2><ol><li>当变量属于实例,该实例被多线程操作</li><li>当多线程会影响到执行结果时候,需要保证线程安全</li><li>当变量属于共享属性时候需要保证线程安全,而方法内变量属于每个 线程的空间,则不需要。</li></ol><h2 id="_3-如何保证线程安全" tabindex="-1">3. 如何保证线程安全？ <a class="header-anchor" href="#_3-如何保证线程安全" aria-label="Permalink to &quot;3. 如何保证线程安全？&quot;">​</a></h2><ol><li>原子性 lock操作,Syn...</li><li>可见性 volatile</li><li>顺序性 防止被重排序</li></ol><h2 id="_3-1-原子性" tabindex="-1">3.1 原子性 <a class="header-anchor" href="#_3-1-原子性" aria-label="Permalink to &quot;3.1 原子性&quot;">​</a></h2><p>原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。</p><h2 id="_3-2-可见性" tabindex="-1">3.2 可见性 <a class="header-anchor" href="#_3-2-可见性" aria-label="Permalink to &quot;3.2 可见性&quot;">​</a></h2><p>可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。</p><ul><li>volatile 本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取,</li><li>synchronized 则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住.</li></ul><h2 id="_3-3-那么什么时候用可见性" tabindex="-1">3.3 那么什么时候用可见性？ <a class="header-anchor" href="#_3-3-那么什么时候用可见性" aria-label="Permalink to &quot;3.3 那么什么时候用可见性？&quot;">​</a></h2><p>当多线程并不直接进行原子性操作的时候，可以用 volatile 修饰,这样可以保证每个线程读取的都是最新的</p><h2 id="_3-4-什么时候用原子性" tabindex="-1">3.4 什么时候用原子性? <a class="header-anchor" href="#_3-4-什么时候用原子性" aria-label="Permalink to &quot;3.4 什么时候用原子性?&quot;">​</a></h2><p>当涉及到多个线程对同一个数据进行操作的时候，为了保证在同一刻只有一个操作，就用 synchronized 修饰加锁🔐</p><h2 id="_4-servlet线程安全问题思考" tabindex="-1">4. Servlet线程安全问题思考 <a class="header-anchor" href="#_4-servlet线程安全问题思考" aria-label="Permalink to &quot;4. Servlet线程安全问题思考&quot;">​</a></h2><p>Servlet本身是无状态的，一个无状态的Servlet是绝对线程安全的，无状态对象设计也是解决线程安全问题的一种有效手段。</p><p>所以，servlet是否线程安全是由它的实现来决定的，如果它内部的属性或方法会被多个线程改变，它就是线程不安全的，反之，就是线程安全的。</p><p>在一个无状态的情况下，是不存在线程安全问题的，即使存在那也是跟它的实现类相关</p><p>在Servlet中避免使用实例变量是保证Servlet线程安全的最佳选择。</p>`,29)]))}const u=s(l,[["render",t]]);export{c as __pageData,u as default};
