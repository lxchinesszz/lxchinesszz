import{_ as a,o as n,c as e,a4 as p}from"./chunks/framework.B8fosacB.js";const u=JSON.parse('{"title":"Mysql优化示例","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"Mysql优化示例"},"headers":[],"relativePath":"post/java/sql/SQL优化示例.md","filePath":"post/java/sql/SQL优化示例.md","lastUpdated":1731158524000}'),l={name:"post/java/sql/SQL优化示例.md"};function i(r,s,t,c,o,b){return n(),e("div",{"data-pagefind-body":!0},s[0]||(s[0]=[p(`<p><img src="https://img.springlearn.cn/learn_c87a079fcea0d7893b03d4d57478bca7.png" alt=""></p><p><strong>作者</strong>: 西魏陶渊明 <strong>博客</strong>: <a href="https://blog.springlearn.cn/" target="_blank" rel="noreferrer">https://blog.springlearn.cn/</a></p><div class="tip custom-block"><p class="custom-block-title">西魏陶渊明</p><p>莫笑少年江湖梦，谁不少年梦江湖</p></div><h2 id="创建表" tabindex="-1">创建表 <a class="header-anchor" href="#创建表" aria-label="Permalink to &quot;创建表&quot;">​</a></h2><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test03</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test03 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx_a1_a2_a3_a4(a1,a2,a3,a4);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h2 id="建议一、按照复合索引顺序查询" tabindex="-1">建议一、按照复合索引顺序查询 <a class="header-anchor" href="#建议一、按照复合索引顺序查询" aria-label="Permalink to &quot;建议一、按照复合索引顺序查询&quot;">​</a></h2><p><strong>需知</strong></p><ol><li>如果(a,b,c,d)复合索引和查询使用的顺序全部一致,则复合索引全部使用,如果不部分一致或者跨列使用则就是部分使用.</li><li>where和order by拼起来也不要跨列,参考反例2和3</li></ol><h3 id="_1-建议" tabindex="-1">1. 建议 <a class="header-anchor" href="#_1-建议" aria-label="Permalink to &quot;1. 建议&quot;">​</a></h3><ul><li>建议: 按照where后面按照顺序使用复合索引</li><li>建议: where 和 order by不要跨列 <code>explain select a1,a2,a3,a4 from test03 where a1=1 and a2=2 and a3=3 and a4=4;</code></li></ul><p><img src="https://img.springlearn.cn/blog/learn_1596388059000.png" alt=""></p><h3 id="_2-反例1" tabindex="-1">2. 反例1 <a class="header-anchor" href="#_2-反例1" aria-label="Permalink to &quot;2. 反例1&quot;">​</a></h3><p><code>explain select a1,a2,a3,a4 from test03 where a4=1 and a3=2 and a2=3 and a1=4;</code></p><p>可以看到还是一样的,索引都用了，原因是sql在执行时候被sql优化器进行了调整,最后被调整成了上面的顺序写法。 这是最理想的情况,但是实际中建议开发按照顺序来进行查询。 <img src="https://img.springlearn.cn/blog/learn_1596388250000.png" alt=""></p><h3 id="_3-反例2" tabindex="-1">3. 反例2 <a class="header-anchor" href="#_3-反例2" aria-label="Permalink to &quot;3. 反例2&quot;">​</a></h3><p><code>explain select a1,a2,a3,a4 from test03 where a1=1 and a2=2 and a4=4 order by a3;</code></p><ul><li>因为查询条件中复合索引跨列了(跨了a3)，所以导致只能用a1 和a2索引。索引key_len变成8了</li><li>索引中没有查询a3但是却用a3排序了,导致要回表查询a3 <img src="https://img.springlearn.cn/blog/learn_1596388567000.png" alt=""></li></ul><h3 id="_4-反例3" tabindex="-1">4. 反例3 <a class="header-anchor" href="#_4-反例3" aria-label="Permalink to &quot;4. 反例3&quot;">​</a></h3><p><code>explain select a1,a2,a3,a4 from test03 where a1=1 and a4=4 order by a3;</code></p><ul><li>跨了a2 a3 所以a4失效只能用a1 所以key_len只有一个 where 和 order by拼接起来是否也满足复合顺序,如果不满足 就会出现Using filesort</li><li>反例2中where 生效的是a1和a2，但是order by是a3。满足复合索引顺序,所以不会出现Using filesort</li></ul><p><img src="https://img.springlearn.cn/blog/learn_1596389005000.png" alt=""></p><p><code>explain select a1,a2,a3,a4 from test03 where a1=1 and a4=4 order by a2,a3;</code></p><ul><li>where a1 order by a2 a3 所以不会出现上面Using fileSort <img src="https://img.springlearn.cn/blog/learn_1596389167000.png" alt=""></li></ul><h2 id="建议二、单表优化" tabindex="-1">建议二、单表优化 <a class="header-anchor" href="#建议二、单表优化" aria-label="Permalink to &quot;建议二、单表优化&quot;">​</a></h2><h3 id="建表及需求sql" tabindex="-1">建表及需求sql <a class="header-anchor" href="#建表及需求sql" aria-label="Permalink to &quot;建表及需求sql&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>create table book</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span> bid int(4) primary key,</span></span>
<span class="line"><span> name varchar(20) not null,</span></span>
<span class="line"><span> authorid int(4) not null,</span></span>
<span class="line"><span> publicid int(4) not null,</span></span>
<span class="line"><span> typeid int(4) not null</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>insert into book values(1,&#39;tjava&#39;,1,1,2);</span></span>
<span class="line"><span>insert into book values(2,&#39;tjava&#39;,2,1,2);</span></span>
<span class="line"><span>insert into book values(3,&#39;tjava&#39;,3,2,1);</span></span>
<span class="line"><span>insert into book values(4,&#39;tjava&#39;,4,2,3);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>查询authorid = 1 并且 typeid 等于2或者3 然后根据typeid 排序</strong></p><p><code>explain select bid from book where typeid in (2,3) and authorid = 1 order by typeid desc;</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; explain select bid from book where  typeid in (2,3) and authorid = 1  order by typeid desc;</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span></span>
<span class="line"><span>| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                       |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span></span>
<span class="line"><span>|  1 | SIMPLE      | book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    4 |    25.00 | Using where; Using filesort |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span></span>
<span class="line"><span>1 row in set, 1 warning (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可以看出来未用到索引,type是all。就是全表查询了。</p><h3 id="_1-优化1加索引" tabindex="-1">1. 优化1加索引 <a class="header-anchor" href="#_1-优化1加索引" aria-label="Permalink to &quot;1. 优化1加索引&quot;">​</a></h3><p><code>alter table book add index idx_bta(bid,typeid,authorid);</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; explain select bid from book where  typeid in (2,3) and authorid = 1  order by typeid desc;</span></span>
<span class="line"><span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+------------------------------------------+</span></span>
<span class="line"><span>| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                                    |</span></span>
<span class="line"><span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+------------------------------------------+</span></span>
<span class="line"><span>|  1 | SIMPLE      | book  | NULL       | index | NULL          | idx_bta | 12      | NULL |    4 |    25.00 | Using where; Using index; Using filesort |</span></span>
<span class="line"><span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+------------------------------------------+</span></span>
<span class="line"><span>1 row in set, 1 warning (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可以看到通过了加索引type由之前的all变成了index,说明有一点进步。但是我们看到还有一个<code>Using filesort</code>.前面我们说了出现这个 是因为额外多了一次查询。根据sql的解析规则，第一个解析的是typeid,第二个是authorid。那么我们先对索引顺序做一个优化。</p><h3 id="_2-优化索引顺序" tabindex="-1">2. 优化索引顺序 <a class="header-anchor" href="#_2-优化索引顺序" aria-label="Permalink to &quot;2. 优化索引顺序&quot;">​</a></h3><p>复合索引一旦进行了升级优化，就要删除了，否则会进行干扰。<code>drop index idx_bta on book;</code></p><p>按照sql执行顺序来创建索引。这里我们其实也可以不创建bid，但是如果不创建bid,就要回表去查询bid,所以也建议加上。 <code>alter table book add index idx_tab(typeid,authorid,bid);</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; explain select bid,typeid from book where  typeid in (2,3) and authorid = 1  order by typeid desc;</span></span>
<span class="line"><span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------------------------+</span></span>
<span class="line"><span>| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                                         |</span></span>
<span class="line"><span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------------------------+</span></span>
<span class="line"><span>|  1 | SIMPLE      | book  | NULL       | range | idx_tab       | idx_tab | 8       | NULL |    2 |   100.00 | Using where; Backward index scan; Using index |</span></span>
<span class="line"><span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------------------------+</span></span>
<span class="line"><span>1 row in set, 1 warning (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可以看到已经没有了,Using filesort。</p><h3 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3. 总结&quot;">​</a></h3><ul><li>索引优化不会一步到位,要多次优化。</li><li>索引顺序会影响查询效率,如果不知道怎么优化,建议sql执行顺序,多尝试几次不同顺序。通过看type的级别来调整。</li><li>type如果是range或者ref。其实就可以了。如果是index或者all就要考虑是否要进行优化。</li><li>in会是索引失效</li></ul><h2 id="建议三、多表优化" tabindex="-1">建议三、多表优化 <a class="header-anchor" href="#建议三、多表优化" aria-label="Permalink to &quot;建议三、多表优化&quot;">​</a></h2><h3 id="建表及需求sql-1" tabindex="-1">建表及需求sql <a class="header-anchor" href="#建表及需求sql-1" aria-label="Permalink to &quot;建表及需求sql&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>create table teacher2</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    tid int(4) primary key,</span></span>
<span class="line"><span>    cid int(4) not null</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>insert into teacher2 values(1,2);</span></span>
<span class="line"><span>insert into teacher2 values(2,1);</span></span>
<span class="line"><span>insert into teacher2 values(3,3);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>create table course2</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    cid int(4),</span></span>
<span class="line"><span>    cname varchar(20)</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>insert into course2 values(1,&#39;java&#39;);</span></span>
<span class="line"><span>insert into course2 values(2,&#39;python&#39;);</span></span>
<span class="line"><span>insert into course2 values(3,&#39;kotlin&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>需求sql</strong></p><p><code>select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;</span></span>
<span class="line"><span>+-----+-----+------+-------+</span></span>
<span class="line"><span>| tid | cid | cid  | cname |</span></span>
<span class="line"><span>+-----+-----+------+-------+</span></span>
<span class="line"><span>|   2 |   1 |    1 | java  |</span></span>
<span class="line"><span>+-----+-----+------+-------+</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>执行计划分析</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; explain select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span>
<span class="line"><span>| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span>
<span class="line"><span>|  1 | SIMPLE      | c     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where                                        |</span></span>
<span class="line"><span>|  1 | SIMPLE      | t     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span></span>
<span class="line"><span>2 rows in set, 1 warning (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>可以看到有一个<code>Using join buffer </code>。 说明Sql写的太差了，mysql给你加了一个缓存。经过下面的索引优化会去掉。</p><h3 id="优化1小表驱动大表" tabindex="-1">优化1小表驱动大表 <a class="header-anchor" href="#优化1小表驱动大表" aria-label="Permalink to &quot;优化1小表驱动大表&quot;">​</a></h3><p>当编写语句时候,将数据量小的表放左边(假设此时t表小,on t.cid = c.cid);反之如果c表小(on c.cid = t.tic)</p><h3 id="优化2加索引" tabindex="-1">优化2加索引 <a class="header-anchor" href="#优化2加索引" aria-label="Permalink to &quot;优化2加索引&quot;">​</a></h3><p>索引建立在经常使用的字段上,本例中t.cid使用频繁。</p><p><code>alter table teacher2 add index idx_teacher2_cid(cid);</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; explain select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+</span></span>
<span class="line"><span>| id | select_type | table | partitions | type | possible_keys    | key              | key_len | ref        | rows | filtered | Extra       |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+</span></span>
<span class="line"><span>|  1 | SIMPLE      | c     | NULL       | ALL  | NULL             | NULL             | NULL    | NULL       |    3 |    33.33 | Using where |</span></span>
<span class="line"><span>|  1 | SIMPLE      | t     | NULL       | ref  | idx_teacher2_cid | idx_teacher2_cid | 4       | test.c.cid |    1 |   100.00 | Using index |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+</span></span>
<span class="line"><span>2 rows in set, 1 warning (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>给name也加索引</p><p><code>alter table course2 add index idx_course2_name(cname);</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; explain select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname = &#39;java&#39;;</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+</span></span>
<span class="line"><span>| id | select_type | table | partitions | type | possible_keys    | key              | key_len | ref        | rows | filtered | Extra       |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+</span></span>
<span class="line"><span>|  1 | SIMPLE      | c     | NULL       | ref  | idx_course2_name | idx_course2_name | 83      | const      |    1 |   100.00 | Using where |</span></span>
<span class="line"><span>|  1 | SIMPLE      | t     | NULL       | ref  | idx_teacher2_cid | idx_teacher2_cid | 4       | test.c.cid |    1 |   100.00 | Using index |</span></span>
<span class="line"><span>+----+-------------+-------+------------+------+------------------+------------------+---------+------------+------+----------+-------------+</span></span>
<span class="line"><span>2 rows in set, 1 warning (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样两个查询就都用到了索引。</p><h2 id="建议四、sql优化" tabindex="-1">建议四、sql优化 <a class="header-anchor" href="#建议四、sql优化" aria-label="Permalink to &quot;建议四、sql优化&quot;">​</a></h2><h3 id="_1-exist和in" tabindex="-1">1. exist和in <a class="header-anchor" href="#_1-exist和in" aria-label="Permalink to &quot;1. exist和in&quot;">​</a></h3><p>如果主查询的数据集大用 <code>in</code> ,如果子查询数据量大使用 <code>exist</code></p><h3 id="_2-order-by优化" tabindex="-1">2. order by优化 <a class="header-anchor" href="#_2-order-by优化" aria-label="Permalink to &quot;2. order by优化&quot;">​</a></h3><p>Using filesort 有两种算法: 双路排序、单路排序(根据IO的次数,即访问磁盘的顺序)</p><ul><li>MySQL4.1前默认使用双路排序,即扫描两次磁盘(1. 从磁盘读取排序字段,2. 扫描其他字段)</li><li>MySQL4.1后默认使用单路排序,即访问一次磁盘(1. 只读取一次字段,然后在buffer中进行排序)</li></ul><p>但是单路排序有隐患就是不一定是只访问一次磁盘,因为加入数据量特别大,则无法将所有字段的 数据都放到buffer中,要多次分片读取。此时可以考虑调大buffer容量大小。</p><p><code>set max_length_for_sort_data = 1024</code> (单位/字节)</p><p>如果缓存区大小太小,mysql会自动从单路调整到双路。</p><p><strong>建议</strong></p><ul><li>避免使用<code>select *</code></li><li>复合索引不要跨列使用,如果where和order尽量也按照顺序使用</li><li>order by 如果是多个字段,建议都是升序或者都是降序</li></ul><h3 id="_3-慢查询日志" tabindex="-1">3. 慢查询日志 <a class="header-anchor" href="#_3-慢查询日志" aria-label="Permalink to &quot;3. 慢查询日志&quot;">​</a></h3><p><a href="https://blog.springlearn.cn/posts/3935/" target="_blank" rel="noreferrer">如何找到垃圾SQL语句,你知道这些方式吗？</a></p><p>慢sql就是mysql提供的一种日志记录,用于记录响应的时间超过阀值得语句;</p><p><strong>查询是否开启慢查询</strong></p><p><code>show variables like &#39;%slow_query_log%&#39;;</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; show variables like &#39;%slow_query_log%&#39;;</span></span>
<span class="line"><span>+---------------------+-----------------------------------------+</span></span>
<span class="line"><span>| Variable_name       | Value                                   |</span></span>
<span class="line"><span>+---------------------+-----------------------------------------+</span></span>
<span class="line"><span>| slow_query_log      | OFF                                     |</span></span>
<span class="line"><span>| slow_query_log_file | /usr/local/var/mysql/localhost-slow.log |</span></span>
<span class="line"><span>+---------------------+-----------------------------------------+</span></span>
<span class="line"><span>2 rows in set (0.06 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>临时开启:</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set global slow_query_log = 1;</span></span>
<span class="line"><span>exit;</span></span>
<span class="line"><span>services mysql restart</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>查询慢查询日志阀值</strong></p><p><code>show variables like &#39;%long_query_time%&#39;;</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; show variables like &#39;%long_query_time%&#39;;</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>| Variable_name   | Value     |</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>| long_query_time | 10.000000 |</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>临时设置阀值</strong></p><p>修改完成之后要重新登录生效</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set global long_query_time = 5;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; show variables like &#39;%long_query_time%&#39;;</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>| Variable_name   | Value     |</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>| long_query_time | 10.000000 |</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; set global long_query_time = 5;</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.00 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; show variables like &#39;%long_query_time%&#39;;</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>| Variable_name   | Value     |</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>| long_query_time | 10.000000 |</span></span>
<span class="line"><span>+-----------------+-----------+</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; exit</span></span>
<span class="line"><span>Bye</span></span>
<span class="line"><span> liuxin@localhost  ~  mysql -u root -p</span></span>
<span class="line"><span>Enter password:</span></span>
<span class="line"><span>Welcome to the MySQL monitor.  Commands end with ; or \\g.</span></span>
<span class="line"><span>Your MySQL connection id is 9</span></span>
<span class="line"><span>Server version: 8.0.16 Homebrew</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Oracle is a registered trademark of Oracle Corporation and/or its</span></span>
<span class="line"><span>affiliates. Other names may be trademarks of their respective</span></span>
<span class="line"><span>owners.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; show variables like &#39;%long_query_time%&#39;;</span></span>
<span class="line"><span>+-----------------+----------+</span></span>
<span class="line"><span>| Variable_name   | Value    |</span></span>
<span class="line"><span>+-----------------+----------+</span></span>
<span class="line"><span>| long_query_time | 5.000000 |</span></span>
<span class="line"><span>+-----------------+----------+</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="超过阀值得数量" tabindex="-1">超过阀值得数量 <a class="header-anchor" href="#超过阀值得数量" aria-label="Permalink to &quot;超过阀值得数量&quot;">​</a></h4><p><code>show global status like &#39;%slow_queries%&#39;;</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mysql&gt; show global status like &#39;%slow_queries%&#39;;</span></span>
<span class="line"><span>+---------------+-------+</span></span>
<span class="line"><span>| Variable_name | Value |</span></span>
<span class="line"><span>+---------------+-------+</span></span>
<span class="line"><span>| Slow_queries  | 0     |</span></span>
<span class="line"><span>+---------------+-------+</span></span>
<span class="line"><span>1 row in set (0.01 sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>复合索引,不要跨列或无序使用</li><li>复合索引,尽量使用全索引匹配</li><li>不要在索引上进行计算、函数、类型转换</li><li>复合索引不能使用 != 、 &lt;&gt; 、 is null</li><li>like尽量以&quot;常量&quot;开头,不要以&quot;%&quot;开头,否则索引失效</li><li>尽量不要使用类型转换（显式、隐式）,否则索引失效。where name = &#39;lx&#39; 可以。where name <img src="https://img.springlearn.cn/blog/learn_1596447963000.png" alt=""></li><li>尽量不要用or,否则左右索引都可能失效 <img src="https://img.springlearn.cn/blog/learn_1596448080000.png" alt=""></li></ol><p>最后求关注,求订阅,谢谢你的阅读!</p>`,93)]))}const h=a(l,[["render",i]]);export{u as __pageData,h as default};
