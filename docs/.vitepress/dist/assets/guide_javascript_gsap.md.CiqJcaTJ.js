import{_ as a,c as n,aa as i,o as e}from"./chunks/framework.CC62xl_U.js";const o=JSON.parse('{"title":"gsap","description":"","frontmatter":{"title":"gsap","editLink":true,"navbar":true,"category":"JavaScript","link":"https://zhuanlan.zhihu.com/p/711414119"},"headers":[],"relativePath":"guide/javascript/gsap.md","filePath":"guide/javascript/gsap.md"}'),l={name:"guide/javascript/gsap.md"};function p(t,s,r,h,d,c){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="gsap" tabindex="-1">GSAP <a class="header-anchor" href="#gsap" aria-label="Permalink to &quot;GSAP&quot;">​</a></h1><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="ease" tabindex="-1">ease <a class="header-anchor" href="#ease" aria-label="Permalink to &quot;ease&quot;">​</a></h2><p><a href="https://gsap.com/resources/getting-started/Easing" target="_blank" rel="noreferrer">ease</a></p><ul><li>bounce.out 物理反转</li></ul><h2 id="staggers" tabindex="-1">staggers <a class="header-anchor" href="#staggers" aria-label="Permalink to &quot;staggers&quot;">​</a></h2><p>Staggers（交错动画）是一个非常有用的功能，它允许我们设置动画之间的间隔效果，以创建出更加动态和吸引人的动画序列。Staggers支持多种配置方式，主要包括以下几种：</p><h3 id="数字配置" tabindex="-1">数字配置 <a class="header-anchor" href="#数字配置" aria-label="Permalink to &quot;数字配置&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gsap.to(&#39;.box&#39;, {</span></span>
<span class="line"><span>    y: 100,</span></span>
<span class="line"><span>    stagger: 0.1 //每次“。”间隔0.1秒元素开始动画</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="对象配置" tabindex="-1">对象配置 <a class="header-anchor" href="#对象配置" aria-label="Permalink to &quot;对象配置&quot;">​</a></h3><ol><li>each：指定每个动画之间的固定时间间隔（以秒为单位）。</li><li>amount：与each属性配合使用，表示整个动画序列的总时长。如果设置了amount，GSAP会根据动画的数量和each的值来自动调整每个动画的间隔，以确保整个序列在指定的时间内完成。</li><li>from：指定动画开始的索引位置。可以是一个数字，表示从哪个元素开始动画；也可以是一个数组，如[0, 1]，表示从第一个和第二个元素同时开始。</li><li>grid：指示动画元素按照几行几列的网格布局进行交错。例如，grid: [3, 5]表示元素被组织成3行5列的网格。</li><li>axis：指定交错动画的轴向，可以是&quot;x&quot;、&quot;y&quot;或省略（默认同时考虑x和y轴）。如果设置了grid属性，axis可以用来指定是沿x轴还是y轴进行交错。</li><li>ease：定义动画的缓动效果。可以使用GSAP提供的各种缓动函数，如&quot;power2.inOut&quot;。<a href="https://gsap.com/resources/getting-started/Easing" target="_blank" rel="noreferrer">ease</a></li><li>form: 配合 grid 使用，start、end、center、edges、random：这些属性用于控制动画序列的开始位置。例如，start表示从第一个元素开始，end表示从最后一个元素开始，center表示从中心元素开始，edges表示从第一个和最后一个元素同时开始，random表示随机位置开始。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.item&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scale: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      yoyo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      repeat: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      stagger: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          amount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // each: 1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          axis: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ease: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          grid: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          from: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;center&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="函数配置" tabindex="-1">函数配置 <a class="header-anchor" href="#函数配置" aria-label="Permalink to &quot;函数配置&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>      stagger: function(index, target, list) {</span></span>
<span class="line"><span>        // 索引 1，2，3，4，5</span></span>
<span class="line"><span>        console.log(index);</span></span>
<span class="line"><span>        // 元素 &lt;div class=&#39;item&#39;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>        console.log(target);</span></span>
<span class="line"><span>        // 元素集合</span></span>
<span class="line"><span>        console.log(list);</span></span>
<span class="line"><span>        return index * 0.1;</span></span>
<span class="line"><span>      },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="scrolltrigger-plugin" tabindex="-1">ScrollTrigger Plugin <a class="header-anchor" href="#scrolltrigger-plugin" aria-label="Permalink to &quot;ScrollTrigger Plugin&quot;">​</a></h2><p>其他插件不是免费的，个人开发者就不用学了。这里就介绍一个 <code>ScrollTrigger</code>. 我先放弃。哈哈</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gsap&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ScrollTrigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gsap/ScrollTrigger&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="最简单的用法" tabindex="-1">最简单的用法 <a class="header-anchor" href="#最简单的用法" aria-label="Permalink to &quot;最简单的用法&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gsap.to(&#39;.box&#39;, {</span></span>
<span class="line"><span>    scrollTrigger: &#39;.box&#39;, //当.box出现的viewport 中开始动画</span></span>
<span class="line"><span>    x: 500</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="对象配置-1" tabindex="-1">对象配置 <a class="header-anchor" href="#对象配置-1" aria-label="Permalink to &quot;对象配置&quot;">​</a></h3><ol><li>markers 开始标记</li><li>trigger 触发的元素</li><li>start 两个参数，第一个参数是元素的位置，第二个参数是视窗的位置。eg: top center,触发元素的 top 和视窗 center 对齐时候开始动画。</li><li>end 两个参数，第一个参数是元素的位置，第二个参数是视窗的位置。eg: bottom top,触发元素的 bottom 和视窗 top 对齐时候结束动画。</li><li>scrub 平滑，向上滚动时候正向播放动画，向下滚动时候逆向播放动画。</li></ol>`,21)]))}const g=a(l,[["render",p]]);export{o as __pageData,g as default};
