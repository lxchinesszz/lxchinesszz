import{_ as a,E as n,c as t,m as e,a as s,J as l,w as p,ac as h,o as r}from"./chunks/framework.C9DUt1S1.js";const F=JSON.parse('{"title":"①谁在调用JUnit","description":"","frontmatter":{"breadcrumb":false,"navbar":true,"sidebar":true,"pageInfo":true,"contributor":true,"editLink":true,"updateTime":true,"prev":true,"next":true,"comment":false,"footer":true,"backtotop":true,"title":"①谁在调用JUnit","category":"源码分析"},"headers":[],"relativePath":"test/谁在调用JUnit.md","filePath":"test/谁在调用JUnit.md"}'),k={name:"test/谁在调用JUnit.md"},d=h(`<p><img src="https://img.springlearn.cn/blog/learn_1617790044000.png" alt=""></p><p>可以看到idea会将单侧的类和方法传递给JUnit。最终由</p><p><img src="https://img.springlearn.cn/blog/learn_1617790263000.png" alt=""></p><p>可以看到最终是由 <code>AllDefaultPossibilitiesBuilder</code> 来进行了承接 。所以到这里我们就找到了入口。后续所有的能力,都要从JUnit中去寻找了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runner </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRunner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (runner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (runnerLock) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (runner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    runner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AllDefaultPossibilitiesBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(canUseSuiteMethod).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeRunnerForClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fTestClass);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runner;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div>`,5);function E(o,c,g,u,y,_){const i=n("Version");return r(),t("div",null,[e("p",null,[s("当点击了执行单例,发生了什么事情? "),l(i,null,{default:p(()=>[s("基于SpringBoot 2.1.x版本分析")]),_:1})]),d])}const f=a(k,[["render",E]]);export{F as __pageData,f as default};
